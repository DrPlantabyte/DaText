# It is common practice to start DaText with a .meta object to define 
# information important to handling the file (not autmotically generated)
.meta {
	myVersion=1.2.345
	language=Klingon
}

# This is an annotation, a special 
# kind of comment that is parsed 
# by DaText and stored with the 
# key that is defined right after 
# the annotation.
info-placeholder


# This is a standard key=value pair for text
text1=This is some text.
# The content of this string is escaped, it should appear as 
# Doug said "Lisa's teacher told me not to use / or \ in filenames."
text2 = Doug said \"Lisa\'s teacher told me not to use / or \\ in filenames.\"
# This should be identical to text2
text3 = "Doug said \"Lisa's teacher told me not to use / or \\ in filenames.\""
# This also should be identical to text2
text3 = 'Doug said "Lisa\'s teacher told me not to use / or \\ in filenames."'

   key with spaces in name =     herp a derp



# a base-10 integer
type is int10 = 12500
# a base-10 integer
type is int10 too = 12 500
# a base-16 integer
type is hex = 0xEF1490
# a decimal, note that either . or , can mark the decimal place
type is float = 12.345
# a decimal, note that either . or , can mark the decimal place
type is float too = 12,345
# you should use a whitespace as the thousands mark
type is float also = 12 345.67
# a decimal in sci notation
type is scifloat = 1.2345E+1
# a byte array (internal whitespace is ignored, but helps with human readability)
# note: this is hex format, NOT BASE64!
type is byte array = 01 23 45 67 89 AB CD EF 30 
# not a number (text)
type is text = This is text that contains more then one line. \
See?
# not a number (text)
type is text too = "It is probably better to use quotes for multiline text.
See?
So much better!"

# object type is a DaText tree
object1={
	# a object inside an object
	object2={
		text1=heyyyy
		text2=derp
		number=5
	}
	# lists are semicolon delimited text values. intentional semicolons can be escaped or quoted
	list of names=[Bob; Bobby; Bobilina; 
		Bodacious; "Bob, slayer of bunnies; just ignore him"; 
		Herp\; the derper;;;;;;] // trailing semicolon should not cause errors, empty values not added to list
}
 

# That's all the DaText types (int, hex int, decimal, byte array, text, objects, and lists.
# No more will be added to the spec for two reasons:
# 	1. Adding any more will make DaText more complicated and difficult to read 
# and implement (defeating the purpose of DaText)
# 	2. All further extensions can be made by either storing other types as text 
# or as binary data
# Note that there is no schema or other validation for DaText (if you need that, 
# switch to XML as your requirements fall outside the intention of DaText). The 
# type o data is determined only by which method is used to parse the DaText 
# ket=value pair, so putting text in a key that "should be a number" is a valid 
# DaText file, but will throw a NumberFormatException when the program tries to 
# use that key as a number (the exception's message should point to where in the 
# file the problem key is defined).
fin